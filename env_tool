#!/usr/bin/env python3

import argparse
import subprocess
import os

ENV_YML_FN = "environment.yaml"
ENV_PARENT_DIR = "conda"
TOOL_VERSION = "3.0.0"

def run_conda_command(
    args: list[str],
    check_env_errors: bool = True
) -> str:
    command = ["conda"] + args

    try:
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            check=False,
            encoding="utf-8"
        )

        if result.returncode != 0:
            stderr = result.stderr.strip()
            if "No such file or directory" in stderr or "is not a conda environment" in stderr:
                if check_env_errors:
                    raise RuntimeError(f"Conda command failed: {stderr}")
            if not result.stdout.strip():
                raise RuntimeError(f"Conda command failed (code {result.returncode}).\nStderr: {stderr}")

        return result.stdout.strip()

    except FileNotFoundError:
        raise RuntimeError("The 'conda' command was not found. Ensure Conda is installed and on your system PATH.")

def get_conda_envs() -> list[str]:
    output = run_conda_command(["env", "list"])

    env_names = []
    for line in output.splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        parts = line.split()
        if parts:
            env_names.append(parts[0])

    return env_names

def sync_command(env_name):
    env_dir = os.path.join(ENV_PARENT_DIR, env_name)
    env_yaml_fp = os.path.join(env_dir, ENV_YML_FN)

    if not os.path.isfile(env_yaml_fp):
        raise FileNotFoundError(f"Environment YAML file does not exist: {env_yaml_fp}")

    print(f"Syncing conda environment '{env_name}' from {env_yaml_fp}...")
    try:
        env_list = get_conda_envs()
        if env_name in env_list:
            print(f"Removing existing environment '{env_name}'...")
            run_conda_command(["remove", "-n", env_name, "--all", "--yes"])
            print(f"Environment '{env_name}' removed before recreation.")
        else:
            print(f"Environment '{env_name}' does not exist, creating new.")

        run_conda_command(["env", "create", "-n", env_name, "-f", env_yaml_fp])
        print(f"Environment '{env_name}' created from {env_yaml_fp}.")
    except (FileNotFoundError, PermissionError, RuntimeError) as e:
        raise
    except Exception as e:
        raise RuntimeError(f"Unexpected error syncing '{env_name}': {e}")

def sync_all_command():
    try:
        for env_name in os.listdir(ENV_PARENT_DIR):
            env_dir = os.path.join(ENV_PARENT_DIR, env_name)
            env_yaml_fp = os.path.join(env_dir, ENV_YML_FN)
            if os.path.isdir(env_dir) and os.path.isfile(env_yaml_fp):
                try:
                    sync_command(env_name)
                except (FileNotFoundError, PermissionError, RuntimeError) as e:
                    print(f"Error syncing '{env_name}': {e}")
                except Exception as e:
                    print(f"Unexpected error syncing '{env_name}': {e}")
    except Exception as e:
        print(f"Unexpected error in sync_all_command: {e}")

def freeze_command(env_name):
    env_dir = os.path.join(ENV_PARENT_DIR, env_name)
    explicit_fp = os.path.join(env_dir, "explicit.txt")

    env_list = get_conda_envs()
    if env_name not in env_list:
        print(f"Environment '{env_name}' does not exist, cannot generate explicit.txt.")
        return

    try:
        explicit_content = run_conda_command(["list", "--explicit", "--name", env_name])
        with open(explicit_fp, "w", encoding="utf-8") as f:
            f.write(explicit_content)
        print(f"explicit.txt generated for '{env_name}'.")
    except Exception as e:
        print(f"Error generating explicit.txt for '{env_name}': {e}")

def freeze_all_command():
    env_list = get_conda_envs()
    for env_name in os.listdir(ENV_PARENT_DIR):
        env_dir = os.path.join(ENV_PARENT_DIR, env_name)
        env_yaml_fp = os.path.join(env_dir, ENV_YML_FN)
        explicit_fp = os.path.join(env_dir, "explicit.txt")

        if os.path.isdir(env_dir) and os.path.isfile(env_yaml_fp):
            if env_name not in env_list:
                print(f"Environment '{env_name}' does not exist, cannot generate explicit.txt.")
                continue
            try:
                explicit_content = run_conda_command(["list", "--explicit", "--name", env_name])
                with open(explicit_fp, "w", encoding="utf-8") as f:
                    f.write(explicit_content)
                print(f"explicit.txt generated for '{env_name}'.")
            except Exception as e:
                print(f"Error generating explicit.txt for '{env_name}': {e}")

def sync_static_command(env_name):
    env_dir = os.path.join(ENV_PARENT_DIR, env_name)
    reqs_fp = os.path.join(env_dir, "explicit.txt")

    if not os.path.isfile(reqs_fp):
        print(f"explicit.txt not found for environment '{env_name}' at {reqs_fp}")
        return

    print(f"Creating conda environment '{env_name}' from {reqs_fp}...")
    try:
        print("getting existing envs")
        env_list = get_conda_envs()
        print(f"existing envs: {env_list}")
        print(f"env_name: {env_name}")
        print("checking if env in list")
        if env_name in env_list:
            print("removing existing env")
            run_conda_command(["remove", "-n", env_name, "--all", "--yes"])
            print(f"Environment '{env_name}' removed before recreation.")
        else:
            print(f"Environment '{env_name}' does not exist, creating new.")

        run_conda_command(["create", "-n", env_name, "--file", reqs_fp])
        print(f"Environment '{env_name}' created from explicit.txt.")
    except Exception as e:
        print(f"Error recreating '{env_name}' from explicit.txt: {e}")

def sync_static_all_command():
    try:
        for env_name in os.listdir(ENV_PARENT_DIR):
            env_dir = os.path.join(ENV_PARENT_DIR, env_name)
            reqs_fp = os.path.join(env_dir, "explicit.txt")
            if os.path.isdir(env_dir) and os.path.isfile(reqs_fp):
                sync_static_command(env_name)
    except Exception as e:
        print(f"Unexpected error in sync_static_all_command: {e}")

def prune_command():
    env_list = get_conda_envs()
    valid_envs = set()
    for env_name in os.listdir(ENV_PARENT_DIR):
        env_dir = os.path.join(ENV_PARENT_DIR, env_name)
        env_yaml_fp = os.path.join(env_dir, ENV_YML_FN)
        if os.path.isdir(env_dir) and os.path.isfile(env_yaml_fp):
            valid_envs.add(env_name)
    for env_name in env_list:
        if env_name not in valid_envs and env_name != "base":
            print(f"Pruning environment '{env_name}' (no environment.yaml found)...")
            try:
                run_conda_command(["remove", "-n", env_name, "--all", "--yes"])
                print(f"Environment '{env_name}' removed.")
            except Exception as e:
                print(f"Error removing '{env_name}': {e}")

def main():
    parser = argparse.ArgumentParser(description="Environment Manager CLI")
    subparsers = parser.add_subparsers(dest="command")

    sync_parser = subparsers.add_parser("sync", help="Syncs the specified env from the relevant yaml file")
    sync_parser.add_argument("env_name", help="Name of the conda environment to sync")

    subparsers.add_parser("sync_all", help="Searches for all environment.yaml files in the environments directory and syncs the relevant conda envs")

    freeze_parser = subparsers.add_parser("freeze", help="Syncs the specified env and generates explicit.txt")
    freeze_parser.add_argument("env_name", help="Name of the conda environment to sync and export explicit.txt")

    subparsers.add_parser("freeze_all", help="Syncs all envs and generates explicit.txt for each")

    sync_static_parser = subparsers.add_parser("sync_static", help="Recreates the specified env from explicit.txt")
    sync_static_parser.add_argument("env_name", help="Name of the conda environment to recreate from explicit.txt")

    subparsers.add_parser("sync_static_all", help="Recreates all envs from explicit.txt files in their directories")

    subparsers.add_parser("prune", help="Removes all conda envs that don't have associated environment.yaml files")

    subparsers.add_parser("version", help="Prints the tool version")

    args = parser.parse_args()

    match args.command:
        case "sync":
            sync_command(args.env_name)
        case "sync_all":
            sync_all_command()
        case "freeze":
            freeze_command(args.env_name)
        case "freeze_all":
            freeze_all_command()
        case "sync_static":
            sync_static_command(args.env_name)
        case "sync_static_all":
            sync_static_all_command()
        case "prune":
            prune_command()
        case "version":
            print(TOOL_VERSION)
        case _:
            parser.print_help()

if __name__ == "__main__":
    main()